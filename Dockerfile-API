# -------------------
# Etapa 1: Build
# -------------------
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copia los archivos de proyecto para restaurar dependencias primero (mejora el caching)
COPY ["AllRIPs.API/AllRIPs.API.csproj", "AllRIPs.API/"]
COPY ["AllRIPs.DTOS/AllRIPs.DTOS.csproj", "AllRIPs.DTOS/"]
COPY ["AllRIPs.FEV/AllRIPs.FEV.csproj", "AllRIPs.FEV/"]
COPY ["AllRIPs.INTERFACES/AllRIPs.INTERFACES.csproj", "AllRIPs.INTERFACES/"]
COPY ["AllRIPs.SERVICES/AllRIPs.SERVICES.csproj", "AllRIPs.SERVICES/"]

# Restaura las dependencias (el paso más lento)
RUN dotnet restore "AllRIPs.API/AllRIPs.API.csproj"

# Copia todo el código fuente y publica la aplicación
COPY . .
WORKDIR "/src/AllRIPs.API"
RUN dotnet publish "AllRIPs.API.csproj" -c Release -o /app/publish /p:UseAppHost=false

# -------------------
# Etapa 2: Runtime
# -------------------
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app

# Instala dependencias del sistema operativo
RUN apt-get update && apt-get install -y --no-install-recommends \
    libstdc++6 \
    libxml2 \
    libssl3 \
    unixodbc \
    && rm -rf /var/lib/apt/lists/*

# Copia las librerías de SAP e ICU a una ruta estándar
COPY SAP.LIBS/ /usr/local/lib/

# Configura la variable de entorno para que el linker encuentre las librerías
ENV LD_LIBRARY_PATH=/usr/local/lib

# Crea un usuario no root y asigna permisos
RUN addgroup --system appgroup && \
    adduser --system --ingroup appgroup appuser && \
    chown -R appuser:appgroup /app

# Copia la aplicación publicada
COPY --from=build /app/publish .

# Cambia al usuario no root
USER appuser

# Expone el puerto y configura la URL
EXPOSE 80
ENV ASPNETCORE_URLS=http://+:80

# Ejecuta la aplicación
ENTRYPOINT ["dotnet", "AllRIPs.API.dll"]